# 파일 전송
multipass transfer deployment.yaml k8s-single-node:/home/ubuntu/deployment.yaml
multipass transfer demo-0.0.1-SNAPSHOT.jar k8s-single-node:/home/ubuntu/demo-0.0.1-SNAPSHOT.jar
multipass transfer Dockerfile k8s-single-node:/home/ubuntu/Dockerfile
multipass transfer service.yaml k8s-single-node:/home/ubuntu/service.yaml


# 환경 셋팅
sudo apt update
sudo apt install -y docker.io
curl -sfL https://get.k3s.io | sh -s - --write-kubeconfig-mode 644
sudo usermod -aG docker $USER

# 레지스트르 컨테이너 등록
docker run -d -p 5000:5000 --name registry registry:2


# 나갔다가, 재접속
exit
multipass shell k8s-single-node


# 빌드 & 레지스터 등록
docker build -t localhost:5000/my-spring-app:latest .
docker push localhost:5000/my-spring-app:latest

# 파드 생성
k3s kubectl delete deployment my-spring-app
k3s kubectl apply -f deployment.yaml
k3s kubectl get pods

# 오토스케일링
k3s kubectl autoscale deployment my-spring-app --cpu-percent=50 --min=1 --max=5

# 서비스 등록
k3s kubectl apply -f service.yaml
k3s kubectl get services


# 가상머신 삭제 및 재 생성
multipass delete k8s-single-node
multipass purge
multipass launch --name k3s-cpu-node --cpus 2 --memory 2G --disk 10G


# 로그 보기
k3s kubectl logs <파드 이름>

논문에서 내가 제안하는 방법의 우수성을 비교할려면,,3가지정도 비교할려고해
1. 동일한 스펙의 K8s에서 진행하는 CPU/MEM 기반 오토 스케일링
2. 동일한 스펙의 K3s에서 진행하는 CPU/MEM 기반 오토 스케일링
3. 동일한 스펙의 K3s에서 진행하는 머신러닝 기반 오토 스케일링